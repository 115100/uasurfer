// Code generated by "marshaler -type=DeviceType,BrowserName,OSName,Platform -output=const_string.go"; DO NOT EDIT

package uasurfer

import "fmt"

const _DeviceType_name = "device_unknowndevice_computerdevice_tabletdevice_phonedevice_consoledevice_wearabledevice_t_v"

var _DeviceType_map = map[DeviceType]string{
	0: _DeviceType_name[0:14],
	1: _DeviceType_name[14:29],
	2: _DeviceType_name[29:42],
	3: _DeviceType_name[42:54],
	4: _DeviceType_name[54:68],
	5: _DeviceType_name[68:83],
	6: _DeviceType_name[83:93],
}

var _reverse_DeviceType_map = map[string]DeviceType{
	_DeviceType_name[0:14]:  0,
	_DeviceType_name[14:29]: 1,
	_DeviceType_name[29:42]: 2,
	_DeviceType_name[42:54]: 3,
	_DeviceType_name[54:68]: 4,
	_DeviceType_name[68:83]: 5,
	_DeviceType_name[83:93]: 6,
}

func (i DeviceType) String() string {
	if str, ok := _DeviceType_map[i]; ok {
		return str
	}
	return fmt.Sprintf("DeviceType(%d)", i)
}

func (i DeviceType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *DeviceType) UnmarshalText(text []byte) error {
	enum := string(text)
	if val, ok := _reverse_DeviceType_map[enum]; ok {
		*i = DeviceType(val)
		return nil
	}
	return fmt.Errorf("unknown DeviceType value '%s'", enum)
}

const _BrowserName_name = "browser_unknownbrowser_chromebrowser_i_ebrowser_safaribrowser_firefoxbrowser_androidbrowser_operabrowser_blackberrybrowser_u_c_browserbrowser_silkbrowser_nokiabrowser_net_frontbrowser_q_qbrowser_maxthonbrowser_sogou_explorerbrowser_spotifybrowser_bot"

var _BrowserName_map = map[BrowserName]string{
	0:  _BrowserName_name[0:15],
	1:  _BrowserName_name[15:29],
	2:  _BrowserName_name[29:40],
	3:  _BrowserName_name[40:54],
	4:  _BrowserName_name[54:69],
	5:  _BrowserName_name[69:84],
	6:  _BrowserName_name[84:97],
	7:  _BrowserName_name[97:115],
	8:  _BrowserName_name[115:134],
	9:  _BrowserName_name[134:146],
	10: _BrowserName_name[146:159],
	11: _BrowserName_name[159:176],
	12: _BrowserName_name[176:187],
	13: _BrowserName_name[187:202],
	14: _BrowserName_name[202:224],
	15: _BrowserName_name[224:239],
	16: _BrowserName_name[239:250],
}

var _reverse_BrowserName_map = map[string]BrowserName{
	_BrowserName_name[0:15]:    0,
	_BrowserName_name[15:29]:   1,
	_BrowserName_name[29:40]:   2,
	_BrowserName_name[40:54]:   3,
	_BrowserName_name[54:69]:   4,
	_BrowserName_name[69:84]:   5,
	_BrowserName_name[84:97]:   6,
	_BrowserName_name[97:115]:  7,
	_BrowserName_name[115:134]: 8,
	_BrowserName_name[134:146]: 9,
	_BrowserName_name[146:159]: 10,
	_BrowserName_name[159:176]: 11,
	_BrowserName_name[176:187]: 12,
	_BrowserName_name[187:202]: 13,
	_BrowserName_name[202:224]: 14,
	_BrowserName_name[224:239]: 15,
	_BrowserName_name[239:250]: 16,
}

func (i BrowserName) String() string {
	if str, ok := _BrowserName_map[i]; ok {
		return str
	}
	return fmt.Sprintf("BrowserName(%d)", i)
}

func (i BrowserName) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *BrowserName) UnmarshalText(text []byte) error {
	enum := string(text)
	if val, ok := _reverse_BrowserName_map[enum]; ok {
		*i = BrowserName(val)
		return nil
	}
	return fmt.Errorf("unknown BrowserName value '%s'", enum)
}

const _OSName_name = "o_s_unknowno_s_windows_phoneo_s_windowso_s_mac_o_s_xo_si_o_so_s_androido_s_blackberryo_s_chrome_o_so_s_kindleo_s_web_o_so_s_linuxo_s_playstationo_s_xboxo_s_nintendoo_s_bot"

var _OSName_map = map[OSName]string{
	0:  _OSName_name[0:11],
	1:  _OSName_name[11:28],
	2:  _OSName_name[28:39],
	3:  _OSName_name[39:52],
	4:  _OSName_name[52:60],
	5:  _OSName_name[60:71],
	6:  _OSName_name[71:85],
	7:  _OSName_name[85:99],
	8:  _OSName_name[99:109],
	9:  _OSName_name[109:120],
	10: _OSName_name[120:129],
	11: _OSName_name[129:144],
	12: _OSName_name[144:152],
	13: _OSName_name[152:164],
	14: _OSName_name[164:171],
}

var _reverse_OSName_map = map[string]OSName{
	_OSName_name[0:11]:    0,
	_OSName_name[11:28]:   1,
	_OSName_name[28:39]:   2,
	_OSName_name[39:52]:   3,
	_OSName_name[52:60]:   4,
	_OSName_name[60:71]:   5,
	_OSName_name[71:85]:   6,
	_OSName_name[85:99]:   7,
	_OSName_name[99:109]:  8,
	_OSName_name[109:120]: 9,
	_OSName_name[120:129]: 10,
	_OSName_name[129:144]: 11,
	_OSName_name[144:152]: 12,
	_OSName_name[152:164]: 13,
	_OSName_name[164:171]: 14,
}

func (i OSName) String() string {
	if str, ok := _OSName_map[i]; ok {
		return str
	}
	return fmt.Sprintf("OSName(%d)", i)
}

func (i OSName) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *OSName) UnmarshalText(text []byte) error {
	enum := string(text)
	if val, ok := _reverse_OSName_map[enum]; ok {
		*i = OSName(val)
		return nil
	}
	return fmt.Errorf("unknown OSName value '%s'", enum)
}

const _Platform_name = "unknownwindowsmaclinuxi_padi_phonei_podblackberrywindows_phoneplaystationxboxnintendobot"

var _Platform_map = map[Platform]string{
	0:  _Platform_name[0:7],
	1:  _Platform_name[7:14],
	2:  _Platform_name[14:17],
	3:  _Platform_name[17:22],
	4:  _Platform_name[22:27],
	5:  _Platform_name[27:34],
	6:  _Platform_name[34:39],
	7:  _Platform_name[39:49],
	8:  _Platform_name[49:62],
	9:  _Platform_name[62:73],
	10: _Platform_name[73:77],
	11: _Platform_name[77:85],
	12: _Platform_name[85:88],
}

var _reverse_Platform_map = map[string]Platform{
	_Platform_name[0:7]:   0,
	_Platform_name[7:14]:  1,
	_Platform_name[14:17]: 2,
	_Platform_name[17:22]: 3,
	_Platform_name[22:27]: 4,
	_Platform_name[27:34]: 5,
	_Platform_name[34:39]: 6,
	_Platform_name[39:49]: 7,
	_Platform_name[49:62]: 8,
	_Platform_name[62:73]: 9,
	_Platform_name[73:77]: 10,
	_Platform_name[77:85]: 11,
	_Platform_name[85:88]: 12,
}

func (i Platform) String() string {
	if str, ok := _Platform_map[i]; ok {
		return str
	}
	return fmt.Sprintf("Platform(%d)", i)
}

func (i Platform) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *Platform) UnmarshalText(text []byte) error {
	enum := string(text)
	if val, ok := _reverse_Platform_map[enum]; ok {
		*i = Platform(val)
		return nil
	}
	return fmt.Errorf("unknown Platform value '%s'", enum)
}
